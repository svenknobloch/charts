apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "postgres.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "postgres.name" . }}
    helm.sh/chart: {{ include "postgres.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "postgres.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "postgres.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: 5432
          {{- if .Values.config }}
          env:
          {{- if .Values.config.user }}
          - name: POSTGRES_USER
            value: {{ .Values.config.user }}
          {{- end }}
          {{- if .Values.config.password }}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "postgres.fullname" .}}
                key: password
          {{- end }}
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
          {{- if .Values.config.database }}
          - name: POSTGRES_DB
            value: {{ .Values.config.database }}
          {{- end }}
          {{- end }}
          livenessProbe:
            exec:
              command:
              - "pg_isready"
              - "-h"
              - "localhost"
              - "-U"
              - {{ .Values.config.user | default "postgres" | quote}}
          readinessProbe:
            exec:
              command:
              - "pg_isready"
              - "-h"
              - "localhost"
              - "-U"
              - {{ .Values.config.user | default "postgres" | quote}}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          - name: data
            mountPath: "/var/lib/postgresql/data/pgdata"
            subPath: "pgdata"
      volumes:
      - name: data
      {{- if .Values.global.persistence }}
        persistentVolumeClaim:
          claimName: {{ template "postgres.fullname" . }}
      {{- else }}
        emptyDir: {}
      {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

